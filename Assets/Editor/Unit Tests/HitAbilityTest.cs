using NUnit.Framework;
using GameScreen.Character;
using GameScreen.Character.Abilities;
using UnityEngine;
using CharacterInfo = GameScreen.Character.CharacterInfo;

public class HitAbilityTest
{
	#region Autogenerated

/*
	[Test]
	public void HitAbilityTestSimplePasses() {
		// Use the Assert class to test conditions.
	}

	// A UnityTest behaves like a coroutine in PlayMode
	// and allows you to yield null to skip a frame in EditMode
	[UnityTest]
	public IEnumerator HitAbilityTestWithEnumeratorPasses() {
		// Use the Assert class to test conditions.
		// yield to skip a frame
		yield return null;
	}*/

	#endregion

	[Test]
	public void InvokeNoTarget()
	{
		CharacterInfoController character = GenerateCharacter("Raid 0", "Raid 1");

		AbilityInvokeErrorCode code = character.InvokeAbility(0);
		Assert.AreEqual(AbilityInvokeErrorCode.WRONG_TARGET, code);
	}

	[Test]
	public void InvokeOnSelf()
	{
		CharacterInfoController character = GenerateCharacter("Raid 0", "Raid 1");
		
		AbilityInvokeErrorCode code = character.InvokeAbility(0, character);
		Assert.AreEqual(AbilityInvokeErrorCode.WRONG_TARGET, code);
	}

	[Test]
	public void InvokeOnAlly()
	{
		CharacterInfoController character1 = GenerateCharacter("Raid 0", "Raid 1");
		CharacterInfoController character2 = GenerateCharacter("Raid 0", "Raid 1");
		
		AbilityInvokeErrorCode code = character1.InvokeAbility(0, character2);
		Assert.AreEqual(AbilityInvokeErrorCode.WRONG_TARGET, code);
	}

	[Test]
	public void InvokeOnEnemy()
	{
		CharacterInfoController character1 = GenerateCharacter("Raid 0", "Raid 1");
		CharacterInfoController character2 = GenerateCharacter("Raid 1", "Raid 0");
		
		AbilityInvokeErrorCode code = character1.InvokeAbility(0, character2);
		Assert.AreEqual(AbilityInvokeErrorCode.NO_ERROR, code);
	}

	[Test]
	public void InvokeTooFar()
	{
		CharacterInfoController character1 = GenerateCharacter("Raid 0", "Raid 1");
		character1.transform.position = new Vector3(0.0f, -10.0f, 0.0f);
		CharacterInfoController character2 = GenerateCharacter("Raid 1", "Raid 0");
		character2.transform.position = new Vector3(0.0f, 10.0f, 0.0f);
		
		AbilityInvokeErrorCode code = character1.InvokeAbility(0, character2);
		Assert.AreEqual(AbilityInvokeErrorCode.TOO_FAR, code);
	}

	[Test]
	public void InvokeNoEnergy()
	{
		CharacterInfoController character1 = GenerateCharacter("Raid 0", "Raid 1", 100, 0);
		CharacterInfoController character2 = GenerateCharacter("Raid 1", "Raid 0");
		
		AbilityInvokeErrorCode code = character1.InvokeAbility(0, character2);
		Assert.AreEqual(AbilityInvokeErrorCode.NO_ENERGY, code);
	}

	private CharacterInfoController GenerateCharacter(string allyTeam, string enemyTeam, float currentHealth = 100,
		float currentEnergy = 100)
	{
		GameObject o = new GameObject();
		CharacterInfoController character = o.AddComponent<CharacterInfoController>();
		character.Info = new CharacterInfo
		{
			Abilities = new [] {GenerateHitAbility()},
			AllyTags = new[] {allyTeam},
			EnemyTags = new[] {enemyTeam},
			Tag = allyTeam,
			StatsInfo = new StatsInfo(100, currentHealth, 2, 40, currentEnergy, 3, "Character")
		};
		return character;
	}

	private AbilityContainer GenerateHitAbility()
	{
		HitAbility hitAbility = ScriptableObject.CreateInstance<HitAbility>();

		AbilityInfo abilityInfo = hitAbility.AbilityInfo;
		abilityInfo.Cost = 10;
		hitAbility.AbilityInfo = abilityInfo;
		
		AbilityContainer container = new AbilityContainer(hitAbility);
        
		return container;
	}
}
