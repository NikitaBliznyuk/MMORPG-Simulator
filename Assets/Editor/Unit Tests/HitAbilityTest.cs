using NUnit.Framework;
using Game.Character;
using Game.UI.View;
using UnityEngine;
using CharacterInfo = Game.Character.CharacterInfo;

public class HitAbilityTest
{
	#region Autogenerated

/*
	[Test]
	public void HitAbilityTestSimplePasses() {
		// Use the Assert class to test conditions.
	}

	// A UnityTest behaves like a coroutine in PlayMode
	// and allows you to yield null to skip a frame in EditMode
	[UnityTest]
	public IEnumerator HitAbilityTestWithEnumeratorPasses() {
		// Use the Assert class to test conditions.
		// yield to skip a frame
		yield return null;
	}*/

	#endregion

	[Test]
	public void InvokeNoTarget()
	{
		CharacterInfoController character = GenerateCharacter("Raid 0", "Raid 1");

		AbilityInvokeErrorCode code = character.InvokeAbility(0);
		Assert.AreEqual(AbilityInvokeErrorCode.WRONG_TARGET, code);
	}

	[Test]
	public void InvokeOnSelf()
	{
		CharacterInfoController character = GenerateCharacter("Raid 0", "Raid 1");
		
		AbilityInvokeErrorCode code = character.InvokeAbility(0, character);
		Assert.AreEqual(AbilityInvokeErrorCode.WRONG_TARGET, code);
	}

	[Test]
	public void InvokeOnAlly()
	{
		CharacterInfoController character1 = GenerateCharacter("Raid 0", "Raid 1");
		CharacterInfoController character2 = GenerateCharacter("Raid 0", "Raid 1");
		
		AbilityInvokeErrorCode code = character1.InvokeAbility(0, character2);
		Assert.AreEqual(AbilityInvokeErrorCode.WRONG_TARGET, code);
	}

	[Test]
	public void InvokeOnEnemy()
	{
		CharacterInfoController character1 = GenerateCharacter("Raid 0", "Raid 1");
		CharacterInfoController character2 = GenerateCharacter("Raid 1", "Raid 0");
		
		AbilityInvokeErrorCode code = character1.InvokeAbility(0, character2);
		Assert.AreEqual(AbilityInvokeErrorCode.NO_ERROR, code);
	}

	private CharacterInfoController GenerateCharacter(string allyTeam, string enemyTeam)
	{
		GameObject o = new GameObject();
		CharacterInfoController character = o.AddComponent<CharacterInfoController>();
		character.Info = new CharacterInfo
		{
			Abilities = new Ability[] {ScriptableObject.CreateInstance<HitAbility>()},
			AllyTags = new[] {allyTeam},
			EnemyTags = new[] {enemyTeam},
			Tag = allyTeam,
			StatsInfo = new StatsInfo(100, 100, 2, 40, 40, 3, "Player 1")
		};
		return character;
	}
}
